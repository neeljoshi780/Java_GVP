interface Shape {
    double area();

    double perimeter();
}

class Rectangle_ implements Shape {
    private double length, width;

    // Constructor
    Rectangle_(double length, double width) {
        this.length = length;
        this.width = width;
    }

    @Override
    public double area() {
        return length * width;
    }

    @Override
    public double perimeter() {
        return 2 * (length + width);
    }
}

class Triangle implements Shape {
    private double base, height, side1, side2, side3;

    // Constructor
    Triangle(double base, double height, double side1, double side2, double side3) {
        this.base = base;
        this.height = height;
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    @Override
    public double area() {
        return 0.5 * base * height;
    }

    @Override
    public double perimeter() {
        return side1 + side2 + side3;
    }
}

class Circle_ implements Shape {
    private double radius;

    // Constructor
    Circle_(double radius) {
        this.radius = radius;
    }

    @Override
    public double area() {
        return Math.PI * radius * radius;
    }

    @Override
    public double perimeter() {
        return 2 * Math.PI * radius;
    }
}

public class P10 {
    public static void main(String[] args) {
        // Rectangle
        Rectangle_ r1 = new Rectangle_(10, 5);
        System.out.println("Rectangle Area: " + r1.area());
        System.out.println("Rectangle Perimeter: " + r1.perimeter());

        // Triangle
        Triangle t1 = new Triangle(5, 12, 5, 12, 13);
        System.out.println("Triangle Area: " + t1.area());
        System.out.println("Triangle Perimeter" + t1.perimeter());

        // Circle
        Circle_ c1 = new Circle_(7);
        System.out.println("Circle Area: " + c1.area());
        System.out.println("Circle Perimeter" + c1.perimeter());
    }
}
